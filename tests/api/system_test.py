from fastapi.testclient import TestClient
import sys
import os
import uuid
import pytest

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))
from backend.fastapi.api.main_app import app

pytestmark = pytest.mark.system

client = TestClient(app)


def test_business_generation():
    response = client.get("/api/business/generate-business")
    assert response.status_code == 200, "Response code for business generation is unsuccessful"

    data = response.json()
    assert data['business_name'] is not None, "Incomplete Business Generated by LLM. Missing Field: business_name"
    assert data['business_location'] is not None, "Incomplete Business Generated by LLM. Missing Field: business_location"
    assert data['business_contact_info'] is not None, "Incomplete Business Generated by LLM. Missing Field: business_contact_info"
    assert data['business_activity'] is not None, "Incomplete Business Generated by LLM. Missing Field: business_activity"
    assert data['business_description'] is not None, "Incomplete Business Generated by LLM. Missing Field: business_description"


def test_assets_generation():
    mock_business_no_assets = {'business_name': 'Tidal Tabletops', 'business_location': 'San Francisco', 'business_contact_info': 'info@tidaltabletops.com, (415) 123-4567', 'business_activity': 'Design and manufacturing of custom tabletops and desks for home offices, co-working spaces, and restaurants.', 'business_description': 'Tidal Tabletops is a San Francisco-based startup that specializes in designing and manufacturing high-quality, custom tabletops and desks. Our products are designed to be both functional and visually appealing, making them perfect for home offices, co-working spaces, and restaurants looking to elevate their interior design. With our state-of-the-art technology and commitment to sustainability, we aim to provide our customers with unique and durable solutions that meet their specific needs.', 'assets': {'assets': []}, 'potential_threats': {'threats': []}}
    response = client.post("/api/assets/generate-assets", json=mock_business_no_assets)
    assert response.status_code == 200, "Response code for assets generation is unsuccessful"
    assert response.json()['assets'] is not None, "No assets were generated"


def test_threats_generation():
    mock_business_no_threats = {'business_name': 'Tidal Tabletops', 'business_location': 'San Francisco', 'business_contact_info': 'info@tidaltabletops.com, (415) 123-4567', 'business_activity': 'Design and manufacturing of custom tabletops and desks for home offices, co-working spaces, and restaurants.', 'business_description': 'Tidal Tabletops is a San Francisco-based startup that specializes in designing and manufacturing high-quality, custom tabletops and desks. Our products are designed to be both functional and visually appealing, making them perfect for home offices, co-working spaces, and restaurants looking to elevate their interior design. With our state-of-the-art technology and commitment to sustainability, we aim to provide our customers with unique and durable solutions that meet their specific needs.', 'assets': {'assets': [{'category': 'Data Storage', 'description': "The company's local server contains sensitive data such as schedules, billing information, and other confidential details. The server is currently stored in a small office space with limited security measures, including a simple lock on the door. Physical access to the server requires a keycard that can be easily lost or stolen."}, {'category': 'Financial Data', 'description': 'The company stores financial and insurance data in the cloud using a password-protected account. However, the password is not regularly updated, and employees are not required to use multi-factor authentication when accessing their accounts.'}, {'category': 'Client Information', 'description': 'The website contains client contact information and scheduling details stored in a database. Unfortunately, the database is not regularly backed up, and there is no clear process for securely disposing of sensitive data when it becomes outdated or obsolete.'}, {'category': 'Physical Security', 'description': 'The company uses physical security measures such as keys, locks, visitor management systems, and surveillance cameras to protect its office space. However, the security cameras are not monitored in real-time, and the system is not regularly tested for vulnerabilities.'}, {'category': 'Website Credentials', 'description': "The company's website credentials, including financial information and tax records, are stored in a physical drawer on-site. Unfortunately, the drawer is not locked, and access to these sensitive documents requires a key that can be easily lost or stolen."}, {'category': 'Email Security', 'description': 'Company emails lack multi-factor authentication, making them vulnerable to phishing attacks. Employee passwords are created by individual staff members and are not centrally managed, which increases the risk of weak passwords being used across the organization.'}, {'category': 'HIPAA-Regulated Data', 'description': 'The company stores HIPAA-regulated patient data in the cloud using a password-protected account. However, the password is not regularly updated, and employees are not required to use multi-factor authentication when accessing their accounts. The system is also not regularly audited for compliance with HIPAA regulations.'}, {'category': 'Contract Management', 'description': 'The company stores legal agreements outlining responsibilities between practitioners and the clinic in a physical file cabinet on-site. Unfortunately, the files are not securely stored, and access to these documents requires a key that can be easily lost or stolen.'}]}, 'potential_threats': {'threats': []}}
    response = client.post("/api/threats/generate-threats", json=mock_business_no_threats)
    assert response.status_code == 200, "Response code for threats generation is unsuccessful"
    assert response.json()['potential_threats'] is not None, "No threats were generated"


def test_business_owner_single_message():
    business = {'business_name': 'Tidal Tabletops', 'business_location': 'San Francisco', 'business_contact_info': 'info@tidaltabletops.com, (415) 123-4567', 'business_activity': 'Design and manufacturing of custom tabletops and desks for home offices, co-working spaces, and restaurants.', 'business_description': 'Tidal Tabletops is a San Francisco-based startup that specializes in designing and manufacturing high-quality, custom tabletops and desks. Our products are designed to be both functional and visually appealing, making them perfect for home offices, co-working spaces, and restaurants looking to elevate their interior design. With our state-of-the-art technology and commitment to sustainability, we aim to provide our customers with unique and durable solutions that meet their specific needs.', 'assets': {'assets': [{'category': 'Data Storage', 'description': "The company's local server contains sensitive data such as schedules, billing information, and other confidential details. The server is currently stored in a small office space with limited security measures, including a simple lock on the door. Physical access to the server requires a keycard that can be easily lost or stolen."}, {'category': 'Financial Data', 'description': 'The company stores financial and insurance data in the cloud using a password-protected account. However, the password is not regularly updated, and employees are not required to use multi-factor authentication when accessing their accounts.'}, {'category': 'Client Information', 'description': 'The website contains client contact information and scheduling details stored in a database. Unfortunately, the database is not regularly backed up, and there is no clear process for securely disposing of sensitive data when it becomes outdated or obsolete.'}, {'category': 'Physical Security', 'description': 'The company uses physical security measures such as keys, locks, visitor management systems, and surveillance cameras to protect its office space. However, the security cameras are not monitored in real-time, and the system is not regularly tested for vulnerabilities.'}, {'category': 'Website Credentials', 'description': "The company's website credentials, including financial information and tax records, are stored in a physical drawer on-site. Unfortunately, the drawer is not locked, and access to these sensitive documents requires a key that can be easily lost or stolen."}, {'category': 'Email Security', 'description': 'Company emails lack multi-factor authentication, making them vulnerable to phishing attacks. Employee passwords are created by individual staff members and are not centrally managed, which increases the risk of weak passwords being used across the organization.'}, {'category': 'HIPAA-Regulated Data', 'description': 'The company stores HIPAA-regulated patient data in the cloud using a password-protected account. However, the password is not regularly updated, and employees are not required to use multi-factor authentication when accessing their accounts. The system is also not regularly audited for compliance with HIPAA regulations.'}, {'category': 'Contract Management', 'description': 'The company stores legal agreements outlining responsibilities between practitioners and the clinic in a physical file cabinet on-site. Unfortunately, the files are not securely stored, and access to these documents requires a key that can be easily lost or stolen.'}]}, 'potential_threats': {'threats': [{'category': 'Initial Access: Phishing Email', 'description': 'Employees may receive phishing emails that trick them into revealing sensitive information such as login credentials or financial data.'}, {'category': 'Execution: Malware Infection via Lost Keycard', 'description': 'A lost keycard could be used to access the local server, allowing an attacker to install malware and gain unauthorized access to sensitive data.'}, {'category': 'Persistence: Unsecured Wi-Fi Network', 'description': "The company's unsecured Wi-Fi network could allow attackers to intercept sensitive data transmitted over the network or inject malware into devices connected to it."}, {'category': 'Privilege Escalation: Weak Passwords', 'description': 'Weak passwords used by employees for their accounts could be guessed or brute-forced by attackers, allowing them to gain access to sensitive systems and data.'}, {'category': 'Defense Evasion: Lack of MFA', 'description': "The company's lack of multi-factor authentication (MFA) makes it easier for attackers to bypass security measures and gain unauthorized access to accounts."}, {'category': 'Lateral Movement: Social Engineering', 'description': "Attackers could use social engineering tactics to trick employees into revealing sensitive information or performing actions that compromise the company's security."}, {'category': 'Privilege Escalation: Physical Access Issues', 'description': "The company's physical access issues, such as a lost keycard or unsecured server room, could allow attackers to gain unauthorized access to sensitive systems and data."}, {'category': 'Defense Evasion: Unaudited HIPAA Compliance', 'description': "The company's lack of regular auditing for HIPAA compliance increases the risk that attackers could exploit vulnerabilities in the system without being detected."}, {'category': 'Execution: Contract Management File Cabinet Breach', 'description': 'Attackers could gain access to sensitive contract management documents by breaching the physical file cabinet, potentially leading to intellectual property theft or other malicious activities.'}, {'category': 'Initial Access: Public-Facing System Vulnerability', 'description': "The company's public-facing website may contain vulnerabilities that attackers can exploit to gain unauthorized access to sensitive data or systems."}]}}
    req = {
        "business": business,
        "messages": [{"role": "human", "content": "What are your main business assets?"}],
    }
    r = client.post("/api/chat/owner/chat", json=req)
    assert r.status_code == 200, f"Chatbot single message failed: {r.text}"
    data = r.json()
    assert "conversation" in data, "Missing conversation in response"
    assert any(m["role"] == "ai" for m in data["conversation"]), "No AI response in conversation"
    ai_msg = next(m for m in data["conversation"] if m["role"] == "ai")
    assert len(ai_msg["content"]) > 10, "AI response is too short"


def test_business_owner_two_turns():
    business = {'business_name': 'Tidal Tabletops', 'business_location': 'San Francisco', 'business_contact_info': 'info@tidaltabletops.com, (415) 123-4567', 'business_activity': 'Design and manufacturing of custom tabletops and desks for home offices, co-working spaces, and restaurants.', 'business_description': 'Tidal Tabletops is a San Francisco-based startup that specializes in designing and manufacturing high-quality, custom tabletops and desks. Our products are designed to be both functional and visually appealing, making them perfect for home offices, co-working spaces, and restaurants looking to elevate their interior design. With our state-of-the-art technology and commitment to sustainability, we aim to provide our customers with unique and durable solutions that meet their specific needs.', 'assets': {'assets': [{'category': 'Data Storage', 'description': "The company's local server contains sensitive data such as schedules, billing information, and other confidential details. The server is currently stored in a small office space with limited security measures, including a simple lock on the door. Physical access to the server requires a keycard that can be easily lost or stolen."}, {'category': 'Financial Data', 'description': 'The company stores financial and insurance data in the cloud using a password-protected account. However, the password is not regularly updated, and employees are not required to use multi-factor authentication when accessing their accounts.'}, {'category': 'Client Information', 'description': 'The website contains client contact information and scheduling details stored in a database. Unfortunately, the database is not regularly backed up, and there is no clear process for securely disposing of sensitive data when it becomes outdated or obsolete.'}, {'category': 'Physical Security', 'description': 'The company uses physical security measures such as keys, locks, visitor management systems, and surveillance cameras to protect its office space. However, the security cameras are not monitored in real-time, and the system is not regularly tested for vulnerabilities.'}, {'category': 'Website Credentials', 'description': "The company's website credentials, including financial information and tax records, are stored in a physical drawer on-site. Unfortunately, the drawer is not locked, and access to these sensitive documents requires a key that can be easily lost or stolen."}, {'category': 'Email Security', 'description': 'Company emails lack multi-factor authentication, making them vulnerable to phishing attacks. Employee passwords are created by individual staff members and are not centrally managed, which increases the risk of weak passwords being used across the organization.'}, {'category': 'HIPAA-Regulated Data', 'description': 'The company stores HIPAA-regulated patient data in the cloud using a password-protected account. However, the password is not regularly updated, and employees are not required to use multi-factor authentication when accessing their accounts. The system is also not regularly audited for compliance with HIPAA regulations.'}, {'category': 'Contract Management', 'description': 'The company stores legal agreements outlining responsibilities between practitioners and the clinic in a physical file cabinet on-site. Unfortunately, the files are not securely stored, and access to these documents requires a key that can be easily lost or stolen.'}]}, 'potential_threats': {'threats': [{'category': 'Initial Access: Phishing Email', 'description': 'Employees may receive phishing emails that trick them into revealing sensitive information such as login credentials or financial data.'}, {'category': 'Execution: Malware Infection via Lost Keycard', 'description': 'A lost keycard could be used to access the local server, allowing an attacker to install malware and gain unauthorized access to sensitive data.'}, {'category': 'Persistence: Unsecured Wi-Fi Network', 'description': "The company's unsecured Wi-Fi network could allow attackers to intercept sensitive data transmitted over the network or inject malware into devices connected to it."}, {'category': 'Privilege Escalation: Weak Passwords', 'description': 'Weak passwords used by employees for their accounts could be guessed or brute-forced by attackers, allowing them to gain access to sensitive systems and data.'}, {'category': 'Defense Evasion: Lack of MFA', 'description': "The company's lack of multi-factor authentication (MFA) makes it easier for attackers to bypass security measures and gain unauthorized access to accounts."}, {'category': 'Lateral Movement: Social Engineering', 'description': "Attackers could use social engineering tactics to trick employees into revealing sensitive information or performing actions that compromise the company's security."}, {'category': 'Privilege Escalation: Physical Access Issues', 'description': "The company's physical access issues, such as a lost keycard or unsecured server room, could allow attackers to gain unauthorized access to sensitive systems and data."}, {'category': 'Defense Evasion: Unaudited HIPAA Compliance', 'description': "The company's lack of regular auditing for HIPAA compliance increases the risk that attackers could exploit vulnerabilities in the system without being detected."}, {'category': 'Execution: Contract Management File Cabinet Breach', 'description': 'Attackers could gain access to sensitive contract management documents by breaching the physical file cabinet, potentially leading to intellectual property theft or other malicious activities.'}, {'category': 'Initial Access: Public-Facing System Vulnerability', 'description': "The company's public-facing website may contain vulnerabilities that attackers can exploit to gain unauthorized access to sensitive data or systems."}]}}
    thread_id = str(uuid.uuid4())
    # First turn
    req1 = {
        "business": business,
        "messages": [{"role": "human", "content": "What are your main business assets?"}],
        "thread_id": thread_id,
    }
    r1 = client.post("/api/chat/owner/chat", json=req1)
    assert r1.status_code == 200, f"First turn failed: {r1.text}"
    data1 = r1.json()
    assert "conversation" in data1, "Missing conversation in response (turn 1)"
    assert any(m["role"] == "ai" for m in data1["conversation"]), "No AI response in conversation (turn 1)"

    req2 = {
        "business": business,
        "messages": data1["conversation"] + [{"role": "human", "content": "How do you protect your financial data?"}],
        "thread_id": thread_id,
    }
    r2 = client.post("/api/chat/owner/chat", json=req2)
    assert r2.status_code == 200, f"Second turn failed: {r2.text}"
    data2 = r2.json()
    assert "conversation" in data2, "Missing conversation in response (turn 2)"
    ai_msgs = [m for m in data2["conversation"] if m["role"] == "ai"]
    assert len(ai_msgs) >= 2, "Should have at least two AI responses after two turns"
    assert all(len(m["content"]) > 10 for m in ai_msgs), "AI responses are too short"


def test_security_assistant_single_message():
    req = {
        "messages": [{"role": "human", "content": "List all available sections."}],
    }
    r = client.post("/api/chat/assessment-assistant", json=req)
    assert r.status_code == 200, f"Security assistant single message failed: {r.text}"
    data = r.json()
    assert "conversation" in data, "Missing conversation in response"
    assert any(m["role"] == "ai" for m in data["conversation"]), "No AI response in conversation"
    ai_msg = next(m for m in data["conversation"] if m["role"] == "ai")

    assert "section" in ai_msg["content"].lower(), "AI response does not mention sections"
    assert "-" in ai_msg["content"], "AI response does not list sections"


def test_security_assistant_two_turns():
    thread_id = str(uuid.uuid4())

    req1 = {
        "messages": [{"role": "human", "content": "List all available sections."}],
        "thread_id": thread_id,
    }
    r1 = client.post("/api/chat/assessment-assistant", json=req1)
    assert r1.status_code == 200, f"First turn failed: {r1.text}"
    data1 = r1.json()
    assert "conversation" in data1, "Missing conversation in response (turn 1)"
    assert any(m["role"] == "ai" for m in data1["conversation"]), "No AI response in conversation (turn 1)"

    req2 = {
        "messages": data1["conversation"] + [{"role": "human", "content": "Tell me about section 1."}],
        "thread_id": thread_id,
    }
    r2 = client.post("/api/chat/assessment-assistant", json=req2)
    assert r2.status_code == 200, f"Second turn failed: {r2.text}"
    data2 = r2.json()
    assert "conversation" in data2, "Missing conversation in response (turn 2)"
    ai_msgs = [m for m in data2["conversation"] if m["role"] == "ai"]
    assert len(ai_msgs) >= 2, "Should have at least two AI responses after two turns"

    assert "section 1" in ai_msgs[-1]["content"].lower(), "Second AI response does not mention section 1"
    assert len(ai_msgs[-1]["content"]) > 10, "Second AI response is too short"


# if __name__ == '__main__':
#     test_business_generation()
#     test_assets_generation()
#     test_threats_generation()
#     test_business_owner_single_message()
#     test_business_owner_two_turns()
#     test_security_assistant_single_message()
#     test_security_assistant_two_turns()

